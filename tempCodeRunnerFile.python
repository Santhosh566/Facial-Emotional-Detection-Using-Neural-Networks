from flask import Flask, render_template, redirect, url_for, session,flash
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField,ValidationError
from wtforms.validators import DataRequired, EqualTo
import psycopg2
import os
import numpy as np
from keras.models import load_model
import cv2
from flask_sqlalchemy import SQLAlchemy
from flask import Flask, request
app = Flask(__name__,static_folder='static')
# Generate a random secret key
app.secret_key = os.urandom(24)
message=None
# PostgreSQL connection parameters
conn_params = {
    'dbname': 'Emotions',
    'user': 'postgres',
    'password': 'santhu',
    'host': 'localhost',
    'port': '5432'
}
class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')
class RegisterForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirmpassword = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Register')
@app.route('/')
def indexuser():
    return render_template('indexuser.html')
@app.route('/loginuser', methods=['GET', 'POST'])
def loginuser():
    form = LoginForm()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data  
        try:
            # Establish connection
            conn = psycopg2.connect(**conn_params)
            cursor = conn.cursor()
            # Execute SQL command
            cursor.execute('SELECT * FROM register WHERE username = %s AND password= %s', (username, password,))
            user = cursor.fetchone()
            if user:
                session['username'] = username
                return redirect(url_for('main'))
            else:
                flash('Invalid credentials', 'error')
        except Exception as e:
            print("An error occurred:", e)
        finally:
            cursor.close()
            conn.close() 
    return render_template('loginuser.html', form=form)

@app.route('/main')
def main():
    if 'username' in session:
        username = session['username']
        return render_template('main.html', username=username)
    else:
        return redirect(url_for('loginuser'))
  # Redirect to login page if user not logged in
# Define the route for registering a user
@app.route('/registeruser', methods=['GET', 'POST'])
def registeruser():
    form = RegisterForm()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data
        confirmpassword = form.confirmpassword.data
        try:
            # Establish connection (assuming conn_params are defined elsewhere)
            conn = psycopg2.connect(**conn_params)
            cursor = conn.cursor()
            if password != confirmpassword:
                raise ValidationError('Passwords do not match')  # Raise custom validation error
            else:
                cursor.execute('SELECT * FROM register WHERE username = %s AND password= %s', (username, password,))
                user = cursor.fetchone()
                if user:
                    p = 'Useranme already exists!'
                    render_template('registeruser.html',message=p)
                else:
                    # Execute SQL command
                    cursor.execute('INSERT INTO register (username, password) VALUES (%s, %s)', (username, password,))
                    conn.commit()
                    return redirect(url_for('loginuser'))
        except Exception as e:
            print("An error occurred:", e)
        finally:
            cursor.close()
            conn.close()
    return render_template('registeruser.html', form=form)



@app.route('/Preproc')
def Preproc():
    os.system("final.py --mode display")
    return render_template('main.html')
@app.route('/detector')
def detector():
    os.system("trytest.py --mode display")
    return render_template('main.html')
@app.route('/percentage')
def percentage():
    os.system("try1.py --mode display")
    return render_template('main.html')
UPLOAD_FOLDER = 'static/images'  # Folder where emotion images are stored
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
# Route for the chatbot page
@app.route('/Chatbot', methods=['GET', 'POST'])
def chatbot():
    if request.method == 'POST':
        emotion_name = request.form['emotion_name'].lower()  # Get emotion name from form
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], f'{emotion_name}.jpg')  # Path to image
        if os.path.isfile(image_path):  # Check if image exists
            return render_template('Chatbot.html', emotion_name=emotion_name, image_path=image_path)
        else:
            return render_template('Chatbot.html', error='Emotion not found', emotion_name=emotion_name)
    return render_template('Chatbot.html')
model = load_model('santhosh.keras')
def predict_emotion(image):
    # Preprocess the image for the model
    image = cv2.resize(image, (48, 48))
    image = np.expand_dims(image, axis=0)
    image = np.expand_dims(image, axis=-1)
    image = image.astype('float32') / 255.0
    # Make a prediction using the model
    prediction = model.predict(image)
    emotion_label = ["angry", "disgust", "scared", "happy", "sad", "surprised", "neutral"]
    predicted_emotion = emotion_label[np.argmax(prediction)]
    return predicted_emotion
@app.route('/Dataloader', methods=['POST', 'GET'])
def dataloader():
    emotion_name = None
    if request.method == 'POST':
        if 'image' not in request.files:
            return render_template('Dataloader.html', error_message='No image uploaded.')
        uploaded_image = request.files['image']
        if uploaded_image.filename == '':
            return render_template('Dataloader.html', error_message='No selected file.')
        # Read the uploaded image as a numpy array
        image_np = cv2.imdecode(np.frombuffer(uploaded_image.read(), np.uint8), cv2.IMREAD_GRAYSCALE)
        # Perform emotion prediction
        emotion_name = predict_emotion(image_np)
    return render_template('Dataloader.html', emotion_name=emotion_name)
import logging
logging.basicConfig(level=logging.INFO)
@app.route('/logout', methods=['GET', 'POST'])
def logout():
    logging.info(f"Request Method: {request.method}")  # Log the request method
    if request.method == 'POST':
        session.clear()
        return redirect(url_for('loginuser'))  # Redirect to the login page
    else:
        return redirect(url_for('loginuser'))  # Redirect to the login page for GET requests
@app.route('/about')
def about():
    return render_template('about.html')
# Configure SQLAlchemy settings
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# PostgreSQL connection parameters
conn_params = {
    'user': 'postgres',
    'password': 'santhu',
    'host': 'localhost',
    'port': '5432',
    'dbname': 'Emotions'
}
# Format the PostgreSQL connection URI
uri = 'postgresql+psycopg2://{user}:{password}@{host}:{port}/{dbname}'.format(**conn_params)
# Set the SQLAlchemy database URI
app.config['SQLALCHEMY_DATABASE_URI'] = uri
# Initialize SQLAlchemy
db = SQLAlchemy(app)
# Define the ContactMessage model with an explicitly defined table name
class ContactMessage(db.Model):
    __tablename__ = 'contact_messages'  # Define your desired table name here
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    message = db.Column(db.Text, nullable=False)
    def __repr__(self):
        return f"ContactMessage(id={self.id}, name='{self.name}', email='{self.email}')"
# Route for handling the contact form
@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        message = request.form['message']
        new_message = ContactMessage(name=name, email=email, message=message)
        db.session.add(new_message)
        db.session.commit()
        return render_template('succes.html')
    return render_template('contact.html')
if __name__ == '__main__':
    app.run(debug=False)

